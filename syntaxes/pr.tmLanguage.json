{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Project Reality",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#imports"
        },
        {
            "include": "#branches"
        },
        {
            "include": "#statements"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "branches": {
            "comment": "Control flow",
            "patterns":[
                {
                    "match": "^\\s*\\b(if|elseIf) (.*) (.*) (.*)\\s*$",
                    "captures": {
                        "1": {
                            "name": "keyword.control"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#nonPathArguments"
                                }
                            ]
                        },
                        "3": {
                            "name": "keyword.operator"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#nonPathArguments"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "keyword.control",
                    "match": "(return|else|endIf)"
                }
            ]
        },
        "variables": {
            "comment": "Declaring custom variables",
            "patterns": [
                {
                    "comment": "Declaration without initialization",
                    "match": "^\\s*(var) (\\w+)\\s*$",
                    "captures": {
                        "1": {
                            "name": "support.type"
                        },
                        "2": {
                            "name": "support.variable"
                        }
                    }
                },
                {
                    "comment": "Declaration with initialization",
                    "match": "^\\s*(var) (\\w+) (.*) (.*)\\s*$",
                    "captures": {
                        "1": {
                            "name": "support.type"
                        },
                        "2": {
                            "name": "support.variable"
                        },
                        "3": {
                            "name": "keyword.operator"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#nonPathArguments"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "statements": {
            "comment": "Configuration options, such as ObjectTemplate",
            "begin": "\\b([^\\.]+)\\.(\\S+)\\b",
            "beginCaptures": {
                "1": {
                    "name": "support.variable"
                },
                "2": {
                    "name": "support.function"
                }
            },
            "patterns": [
                {

                },
                {
                    "include": "#arguments"
                },
                {
                    "include": "#filepaths"
                },
                {
                    "include": "#objectArguments"
                }
            ],
            "end": "\\s*$"
        },
        "imports": {
            "comment": "Declarations, such as file runs and includes",
            "begin": "^\\s*\\b(run|include) (\\S+)",
            "beginCaptures": {
                "1": {
                    "name": "support.function"
                },
                "2": {
                    "name": "string"
                }
            },
            "patterns": [
                {
                    "include": "#nonPathArguments"
                }
            ],
            "end": "\\s*$"
        },
        "nonPathArguments":{
            "patterns": [
                {
                    "include": "#arguments"
                },
                {
                    "include": "#objectArguments"
                }
            ]
        },
        "arguments": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "(?:[eEpP\\+\\-\\.]*\\d+[eEpP\\+\\-\\.]*)+"
                },
                {
                    "name": "string",
                    "match": "\".*\""
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line",
                    "match": "^(?:rem ).*$"
                },
                {
                    "name": "comment.block",
                    "begin": "\\b(?:beginrem)\\b",
                    "end": "\\b(?:endrem)\\b"
                }
            ]
        },
        "filepaths": {
            "patterns": [
                {
                    "name": "string",
                    "match": "(?:\\w+[\/\\\\]+)+(?:[\\.\\w]+)?"
                }
            ]
        },
        "objectArguments": {
            "patterns": [
                {
                    "name": "variable.name",
                    "match": "\\b\\w+\\b"
                }
            ]
        }
    },
    "scopeName": "source.pr"
}